(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{565:function(v,_,t){v.exports=t.p+"assets/img/data.5de7af21.png"},615:function(v,_,t){"use strict";t.r(_);var e=t(12),r=Object(e.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h4",{attrs:{id:"_1-vue-优点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue-优点"}},[v._v("#")]),v._v(" "),e("strong",[v._v("1. Vue 优点")])]),v._v(" "),e("ul",[e("li",[v._v("轻量级框架：只关注视图层，是一个构建数据的视图集合，大小只有几十 kb")]),v._v(" "),e("li",[v._v("简单易学：国人开发，中文文档，不存在语言障碍 ，易于理解和学习")]),v._v(" "),e("li",[v._v("双向数据绑定：保留了 angular 的特点，在数据操作方面更为简单")]),v._v(" "),e("li",[v._v("组件化：保留了 react 的优点，实现了 html 的封装和重用，在构建单页面应用方面有着独特的优势")]),v._v(" "),e("li",[v._v("视图，数据，结构分离：使数据的更改更为简单，不需要进行逻辑代码的修改，只需要操作数据就能完成相关操作")]),v._v(" "),e("li",[v._v("虚拟 DOM：dom 操作是非常耗费性能的， 不再使用原生的 dom 操作节点，极大解放 dom 操作，但具体操作的还是 dom 不过是换了另一种方式")]),v._v(" "),e("li",[v._v("运行速度更快:相比较与 react 而言，同样是操作虚拟 dom，就性能而言，vue 存在很大的优势")])]),v._v(" "),e("h4",{attrs:{id:"_2-vue-响应式实现原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue-响应式实现原理"}},[v._v("#")]),v._v(" "),e("strong",[v._v("2. Vue 响应式实现原理")])]),v._v(" "),e("ul",[e("li",[v._v("接收 "),e("strong",[v._v("data")]),v._v(" 对象并监听 "),e("strong",[v._v("data")]),v._v(" 变化，遍历此对象所有的 "),e("strong",[v._v("property")]),v._v(" ,并使用 "),e("strong",[v._v("Object.defineProperty()")]),v._v(" 把这些 "),e("strong",[v._v("property")]),v._v(" 全部转为 "),e("strong",[v._v("getter/setter")]),v._v(" 在内部 "),e("strong",[v._v("getter/setter")]),v._v(" 让 Vue 能够追踪依赖在 property 被访问和修改时通知变更")]),v._v(" "),e("li",[v._v("每一个 "),e("strong",[v._v("Component")]),v._v(" 实例都对应一个 "),e("strong",[v._v("watcher")]),v._v(" 实例，它会在组件渲染的过程中把“接触”过的数据 "),e("strong",[v._v("property")]),v._v(" 记录为依赖。之后当依赖项的 "),e("strong",[v._v("setter")]),v._v(" 触发时，会通知 "),e("strong",[v._v("watcher")]),v._v("，从而使它关联的组件重新渲染")])]),v._v(" "),e("p",[e("img",{attrs:{src:t(565),alt:"自动获取 input 框焦点"}})]),v._v(" "),e("h4",{attrs:{id:"_3-vue-数据双向绑定实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue-数据双向绑定实现"}},[v._v("#")]),v._v(" "),e("strong",[v._v("3. Vue 数据双向绑定实现")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("Vue")]),v._v(" 双向数据绑定是通过 数据劫持 结合 发布订阅模式的方式来实现的， 也就是说数据和视图同步，数据发生变化，视图跟着变化，视图变化，数据也随之发生改变；")]),v._v(" "),e("li",[v._v("核心：关于 "),e("strong",[v._v("Vue")]),v._v(" 双向数据绑定，其核心是 "),e("strong",[v._v("Object.defineProperty()")]),v._v(" 方法")])]),v._v(" "),e("h4",{attrs:{id:"_4-vue-的两个核心点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue-的两个核心点"}},[v._v("#")]),v._v(" "),e("strong",[v._v("4. Vue 的两个核心点")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("数据驱动:")]),v._v(" "),e("strong",[v._v("ViewModel")]),v._v(" 保证数据和视图的一致性")]),v._v(" "),e("li",[e("strong",[v._v("组件系统:")]),v._v(" 应用类 "),e("strong",[v._v("UI")]),v._v(" 可以看作全部是由组件树构成")])]),v._v(" "),e("h4",{attrs:{id:"_5-vue-常见指令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-vue-常见指令"}},[v._v("#")]),v._v(" "),e("strong",[v._v("5. Vue 常见指令")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("v-show/v-if:")]),v._v(" 控制节点的显示隐藏")]),v._v(" "),e("li",[e("strong",[v._v("v-for:")]),v._v(" 数据遍历")]),v._v(" "),e("li",[e("strong",[v._v("v-model:")]),v._v(" 双向数据绑定")]),v._v(" "),e("li",[e("strong",[v._v("v-on:click/@click:")]),v._v(" 事件绑定 "),e("strong",[v._v("v-on")]),v._v(" 可以一次绑定多个事件")]),v._v(" "),e("li",[e("strong",[v._v("v-bind/:info:")]),v._v(" 数据绑定")]),v._v(" "),e("li",[e("strong",[v._v("v-once:")]),v._v(" 只绑定一次")])]),v._v(" "),e("h4",{attrs:{id:"_6-vue-数据传递"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-vue-数据传递"}},[v._v("#")]),v._v(" "),e("strong",[v._v("6. Vue 数据传递")])]),v._v(" "),e("ul",[e("li",[v._v("父组件向子组件传递："),e("strong",[v._v("props")])]),v._v(" "),e("li",[v._v("子组件向父组件传递："),e("strong",[v._v("$emit")])])]),v._v(" "),e("h4",{attrs:{id:"_7-v-show-和-v-if-区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-v-show-和-v-if-区别"}},[v._v("#")]),v._v(" "),e("strong",[v._v("7. v-show 和 v-if 区别")])]),v._v(" "),e("ul",[e("li",[v._v("共同点：都是控制元素的显示和隐藏")]),v._v(" "),e("li",[v._v("不同点：本质方法不同")]),v._v(" "),e("li",[e("strong",[v._v("v-show")]),v._v(": 通过 "),e("strong",[v._v("CSS")]),v._v(" 中的 "),e("strong",[v._v("display")]),v._v(" 是否为 "),e("strong",[v._v("none")]),v._v("，来控制元素的显示与隐藏，且只会编译一次")]),v._v(" "),e("li",[e("strong",[v._v("v-if")]),v._v(": 动态的向 "),e("strong",[v._v("DOM")]),v._v(" 树添加或删除 "),e("strong",[v._v("DOM")]),v._v(" 元素，如果初始值设置为 "),e("strong",[v._v("false")]),v._v(" ,则不会编译。且不停的销毁和创建 "),e("strong",[v._v("DOM")]),v._v(" 元素，比较消耗性能")]),v._v(" "),e("li",[v._v("如果需要频繁的切换某节点，使用 "),e("strong",[v._v("v-show")]),v._v(" 更优（初始开销大，切换开销小），如果不需要频繁切换某节点，则使用 "),e("strong",[v._v("v-if")]),v._v(" 更优（初始开销小，切换开销大）")])]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[e("strong",[v._v("扩展补充：display: none、visibility: hidden 和 opacity: 0 之间的区别")])]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[v._v("项目")]),v._v(" "),e("th",{staticStyle:{"text-align":"left"}},[v._v("display: none")]),v._v(" "),e("th",{staticStyle:{"text-align":"left"}},[v._v("visibility: hidden")]),v._v(" "),e("th",{staticStyle:{"text-align":"left"}},[v._v("opacity: 0")])])]),v._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[v._v("是否占据空间")]),v._v(" "),e("td",{staticStyle:{"text-align":"left"}},[v._v("隐藏后不占位置")]),v._v(" "),e("td",{staticStyle:{"text-align":"left"}},[v._v("隐藏后仍然占位置")]),v._v(" "),e("td",{staticStyle:{"text-align":"left"}},[v._v("隐藏后仍然占位置")])]),v._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[v._v("子元素是否继承")]),v._v(" "),e("td",{staticStyle:{"text-align":"left"}},[v._v("不会被子元素继承，父元素都不存在了，子元素也不会显示出来")]),v._v(" "),e("td",{staticStyle:{"text-align":"left"}},[v._v("会被子元素继承，通过设置子元素 "),e("strong",[e("em",[v._v("visibility: visible")])]),v._v(" 来显示子元素")]),v._v(" "),e("td",{staticStyle:{"text-align":"left"}},[v._v("会被子元素继承，但是不能设置子元素 "),e("strong",[e("em",[v._v("opacity: 1")])]),v._v(" 来重新显示")])]),v._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[v._v("事件绑定")]),v._v(" "),e("td",{staticStyle:{"text-align":"left"}},[v._v("元素不存在了，因此无法触发它绑定的事件")]),v._v(" "),e("td",{staticStyle:{"text-align":"left"}},[v._v("不会触发它上面绑定的事件")]),v._v(" "),e("td",{staticStyle:{"text-align":"left"}},[v._v("元素上面绑定的事件可以被触发")])]),v._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[v._v("过度动画")]),v._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[e("em",[v._v("transition")])]),v._v(" 对于 "),e("strong",[v._v("display")]),v._v(" 是无效的")]),v._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[e("em",[v._v("transition")])]),v._v(" 对于 "),e("strong",[v._v("visibility")]),v._v(" 是无效的")]),v._v(" "),e("td",{staticStyle:{"text-align":"left"}},[e("strong",[e("em",[v._v("transition")])]),v._v(" 对于 "),e("strong",[v._v("opacity")]),v._v(" 是有效的")])])])])]),e("h4",{attrs:{id:"_8-css-只在当前组件生效"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-css-只在当前组件生效"}},[v._v("#")]),v._v(" "),e("strong",[v._v("8. CSS 只在当前组件生效")])]),v._v(" "),e("p",[v._v("在组件的 "),e("strong",[v._v("style")]),v._v(" 前面添加 "),e("strong",[v._v("scoped")])]),v._v(" "),e("h4",{attrs:{id:"_9-keep-alive-作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-keep-alive-作用"}},[v._v("#")]),v._v(" "),e("strong",[v._v("9. keep-alive 作用")])]),v._v(" "),e("p",[e("strong",[v._v("keep-alive")]),v._v(" 是 "),e("strong",[v._v("Vue")]),v._v(" 的内置组件，可以使被包含的组件保留状态，避免被重新渲染")]),v._v(" "),e("h4",{attrs:{id:"_10-如何获取-dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-如何获取-dom"}},[v._v("#")]),v._v(" "),e("strong",[v._v("10. 如何获取 DOM")])]),v._v(" "),e("p",[v._v("给节点添加 "),e("strong",[v._v("ref=domName")]),v._v(" 属性，通过 "),e("strong",[v._v("this.$refs.domName")]),v._v(" 获取")]),v._v(" "),e("h4",{attrs:{id:"_11-key-的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_11-key-的作用"}},[v._v("#")]),v._v(" "),e("strong",[v._v("11. Key 的作用")])]),v._v(" "),e("p",[v._v("每个节点的唯一标识，"),e("strong",[v._v("Diff")]),v._v(" 算法就可以正确识别此节点，高效的更新虚拟 "),e("strong",[v._v("DOM")])]),v._v(" "),e("h4",{attrs:{id:"_12-v-model-的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-v-model-的使用"}},[v._v("#")]),v._v(" "),e("strong",[v._v("12. v-model 的使用")])]),v._v(" "),e("p",[v._v("用于表单数据的双向绑定，其实就是一个语法糖，实际上就是 "),e("strong",[v._v("v-bind")]),v._v(" 指令绑定一个 "),e("strong",[v._v("value")]),v._v(" 属性，"),e("strong",[v._v("v-on")]),v._v(" 指令给当前元素绑定 "),e("strong",[v._v("input")]),v._v(" 事件")]),v._v(" "),e("h4",{attrs:{id:"_13-computed-和-watch-使用场景"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-computed-和-watch-使用场景"}},[v._v("#")]),v._v(" "),e("strong",[v._v("13. computed 和 watch 使用场景")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("computed:")]),v._v(" 当一个属性受多个属性影响的时候 🌰："),e("strong",[v._v("购物车商品结算的时候")])]),v._v(" "),e("li",[e("strong",[v._v("watch:")]),v._v(" 当一个属性影响多个属性的时候 🌰："),e("strong",[v._v("搜索数据")])])]),v._v(" "),e("h4",{attrs:{id:"_14-nexttick-的使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_14-nexttick-的使用"}},[v._v("#")]),v._v(" "),e("strong",[v._v("14. $nextTick 的使用")])]),v._v(" "),e("p",[v._v("当你修改了 "),e("strong",[v._v("data")]),v._v(" 的值然后马上获取这个 "),e("strong",[v._v("DOM")]),v._v(" 元素的值，是不能获取到更新后的值，你需要使用 "),e("strong",[v._v("$nextTick")]),v._v(" 这个回调，让修改后的 "),e("strong",[v._v("data")]),v._v(" 值渲染更新到 "),e("strong",[v._v("DOM")]),v._v(" 元素之后在获取，才能成功")]),v._v(" "),e("h4",{attrs:{id:"_15-data-为什么必须是一个函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_15-data-为什么必须是一个函数"}},[v._v("#")]),v._v(" "),e("strong",[v._v("15. data 为什么必须是一个函数")])]),v._v(" "),e("p",[v._v("因为 "),e("strong",[v._v("JavaScript")]),v._v(" 的特性所导致，在 "),e("strong",[v._v("Component")]),v._v(" 中，"),e("strong",[v._v("data")]),v._v(" 必须以函数的形式存在，不可以是对象。 组件中的 "),e("strong",[v._v("data")]),v._v("写成一个函数，数据以函数返回值的形式定义，这样每次复用组件的时候，都会返回一份新的 "),e("strong",[v._v("data")]),v._v(" ，相当于每个组件实例都有自己私有的数据空间，它们只负责各自维护的数据，不会造成混乱。而单纯的写成对象形式，就是所有的组件实例共用了一个 "),e("strong",[v._v("data")]),v._v(" ，这样改一个全都改了。")]),v._v(" "),e("h4",{attrs:{id:"_16-v-if-和-v-for-的优先级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_16-v-if-和-v-for-的优先级"}},[v._v("#")]),v._v(" "),e("strong",[v._v("16. v-if 和 v-for 的优先级")])]),v._v(" "),e("p",[v._v("当 "),e("strong",[v._v("v-if")]),v._v(" 与 "),e("strong",[v._v("v-for")]),v._v(" 一起使用时，"),e("strong",[v._v("v-for")]),v._v(" 具有比 "),e("strong",[v._v("v-if")]),v._v(" 更高的优先级，这意味着 "),e("strong",[v._v("v-if")]),v._v(" 将分别重复运行于每个 "),e("strong",[v._v("v-for")]),v._v(" 循环中。所以，不推荐 "),e("strong",[v._v("v-if")]),v._v(" 和 "),e("strong",[v._v("v-for")]),v._v(" 同时使用。 如果 "),e("strong",[v._v("v-if")]),v._v(" 和 "),e("strong",[v._v("v-for")]),v._v(" 一起用的话，"),e("strong",[v._v("Vue")]),v._v(" 中的的会自动提示 "),e("strong",[v._v("v-if")]),v._v(" 应该放到外层去\nVue 3.0 对 "),e("strong",[v._v("v-if")]),v._v(" 和 "),e("strong",[v._v("v-for")]),v._v(" 做了权重比较，可以混合使用")]),v._v(" "),e("h4",{attrs:{id:"_17-vue-常用的修饰符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_17-vue-常用的修饰符"}},[v._v("#")]),v._v(" "),e("strong",[v._v("17. vue 常用的修饰符")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v(".stop :")]),v._v(" 等同于 "),e("strong",[v._v("JavaScript")]),v._v(" 中的 "),e("strong",[v._v("event.stopPropagation()")]),v._v(" ,防止事件冒泡")]),v._v(" "),e("li",[e("strong",[v._v(".prevent :")]),v._v(" 等同于 "),e("strong",[v._v("JavaScript")]),v._v(" 中的 "),e("strong",[v._v("event.preventDefault()")]),v._v(" ,防止执行预设的行为（如果事件可取消，则取消该事件，而不停止事件的进一步传播）")]),v._v(" "),e("li",[e("strong",[v._v(".capture :")]),v._v(" 冒泡事件的方向相反，事件捕获由外到内")]),v._v(" "),e("li",[e("strong",[v._v(".self :")]),v._v(" 只触发自己范围内的事件，不包含子元素")]),v._v(" "),e("li",[e("strong",[v._v(".once :")]),v._v(" 只会触发一次")]),v._v(" "),e("li",[e("strong",[v._v(".keyup :")]),v._v(" 按键修饰符")]),v._v(" "),e("li",[e("strong",[v._v(".passive :")]),v._v(" 滚动事件的默认行为 (即滚动行为) 将会立即触发(提升移动端性能)")])]),v._v(" "),e("h4",{attrs:{id:"_18-vue-router-跳转和-location-href-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_18-vue-router-跳转和-location-href-的区别"}},[v._v("#")]),v._v(" "),e("strong",[v._v("18. vue-router 跳转和 location.href 的区别")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("location.href")]),v._v(" 跳转简单方便，但是刷新了页面")]),v._v(" "),e("li",[e("strong",[v._v("history.pushState(’/url’)")]),v._v(" 无刷新页面，静态跳转")]),v._v(" "),e("li",[e("strong",[v._v("router.push('/url')")]),v._v(" 使用 "),e("strong",[v._v("diff")]),v._v(" 算法，实现按需加载，减少 "),e("strong",[v._v("DOM")]),v._v(" 消耗")]),v._v(" "),e("li",[v._v("在 "),e("strong",[v._v("history")]),v._v(" 下，"),e("strong",[v._v("history.pushState(’/url’)")]),v._v(" 和 "),e("strong",[v._v("router.push('/url')")]),v._v(" 是一样的，因为 "),e("strong",[v._v("vue-router")]),v._v(" 就是用了"),e("strong",[v._v("history.pushState()")])])]),v._v(" "),e("h4",{attrs:{id:"_19-vue-router-如何定义动态路由-怎么获取参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19-vue-router-如何定义动态路由-怎么获取参数"}},[v._v("#")]),v._v(" "),e("strong",[v._v("19. vue-router 如何定义动态路由，怎么获取参数")])]),v._v(" "),e("ul",[e("li",[v._v("在 "),e("strong",[v._v("router")]),v._v(" 目录下的 "),e("strong",[v._v("index.js")]),v._v(" 文件中，对 "),e("strong",[v._v("path")]),v._v(" 属性加上 "),e("strong",[v._v("/:id")])]),v._v(" "),e("li",[v._v("使用 "),e("strong",[v._v("router")]),v._v(" 对象的 "),e("strong",[v._v("params.id")])])]),v._v(" "),e("h4",{attrs:{id:"_20-assets-和-static-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_20-assets-和-static-的区别"}},[v._v("#")]),v._v(" "),e("strong",[v._v("20. assets 和 static 的区别")])]),v._v(" "),e("ul",[e("li",[v._v("两者都是存放静态资源文件\n"),e("ul",[e("li",[v._v("图片")]),v._v(" "),e("li",[v._v("字体图标")]),v._v(" "),e("li",[v._v("样式文件")])])]),v._v(" "),e("li",[e("strong",[v._v("assets:")]),v._v(" 存放的静态资源在进行 "),e("strong",[v._v("npm run build")]),v._v(" 打包时会将 "),e("strong",[v._v("assets")]),v._v(" 中存放的文件进行打包压缩，代码格式化，并且压缩后的文件都会放在 "),e("strong",[v._v("static")]),v._v(" 文件中跟随 "),e("strong",[v._v("index.html")]),v._v(" 上传至服务器")]),v._v(" "),e("li",[e("strong",[v._v("static:")]),v._v(" 存放的静态资源不会走打包压缩格式化流程，而是直接上传至服务器,对比 "),e("strong",[v._v("assets")]),v._v(" 文件，提价较大，上传至服务器会占据更大的空间")]),v._v(" "),e("li",[e("strong",[v._v("建议：")]),v._v(" 项目中 "),e("strong",[v._v("template")]),v._v(" 的 "),e("strong",[v._v("css、js")]),v._v(" 文件最好都放到 "),e("strong",[v._v("assets")]),v._v(" 中，进行压缩和格式化，减少体积。而对于第三方的资源文件或者 "),e("strong",[v._v("iconfont")]),v._v(" 这些都是经过压缩处理过的，可以直接放在 "),e("strong",[v._v("static")]),v._v(" 中")])]),v._v(" "),e("h4",{attrs:{id:"_21-slot-的作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_21-slot-的作用"}},[v._v("#")]),v._v(" "),e("strong",[v._v("21. slot 的作用")])]),v._v(" "),e("p",[e("strong",[v._v("slot")]),v._v(" 插槽，它的作用即父组件内放了一些 "),e("strong",[v._v("DOM")]),v._v(" , 这些 "),e("strong",[v._v("DOM")]),v._v(" 是显示还是不显示，在哪里显示，如何显示，这就是 "),e("strong",[v._v("slot")]),v._v(" 的分发作用")]),v._v(" "),e("h4",{attrs:{id:"_22-router-link-在电脑上有用-在安卓上没反应"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_22-router-link-在电脑上有用-在安卓上没反应"}},[v._v("#")]),v._v(" "),e("strong",[v._v("22. router-link 在电脑上有用，在安卓上没反应")])]),v._v(" "),e("p",[e("strong",[v._v("Vue")]),v._v(" 路由在 "),e("strong",[v._v("Android")]),v._v(" 机上有问题，"),e("strong",[v._v("babel")]),v._v(" 问题，安装 "),e("strong",[v._v("babel polypill")]),v._v(" 插件解决")]),v._v(" "),e("h4",{attrs:{id:"_23-vue2-中注册在-router-link-上事件无效"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_23-vue2-中注册在-router-link-上事件无效"}},[v._v("#")]),v._v(" "),e("strong",[v._v("23. Vue2 中注册在 router-link 上事件无效")])]),v._v(" "),e("p",[v._v("使用 "),e("strong",[v._v("@click.native")]),v._v(" 原因："),e("strong",[v._v("router-link")]),v._v(" 会阻止 "),e("strong",[v._v("click")]),v._v(" 事件，"),e("strong",[v._v(".native")]),v._v(" 指直接监听一个原生事件")]),v._v(" "),e("h4",{attrs:{id:"_24-vue-loader-作用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_24-vue-loader-作用"}},[v._v("#")]),v._v(" "),e("strong",[v._v("24. vue-loader 作用")])]),v._v(" "),e("p",[v._v("它是 "),e("strong",[v._v("webpack")]),v._v(" 的一个 "),e("strong",[v._v("loader")]),v._v(" ，用于处理 "),e("strong",[v._v(".vue")]),v._v(" 文件，将 "),e("strong",[v._v("template/style/js")]),v._v(" 转换成 js 模块")]),v._v(" "),e("ul",[e("li",[v._v("js => es6/7/8/9")]),v._v(" "),e("li",[v._v("style => sass/scss/less")]),v._v(" "),e("li",[v._v("template => html")])]),v._v(" "),e("h4",{attrs:{id:"_25-vue-项目是打包了一个-js-文件-一个-css-文件-还是有多个文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_25-vue-项目是打包了一个-js-文件-一个-css-文件-还是有多个文件"}},[v._v("#")]),v._v(" "),e("strong",[v._v("25. vue 项目是打包了一个 js 文件，一个 css 文件，还是有多个文件")])]),v._v(" "),e("p",[v._v("根据 "),e("strong",[v._v("vue-cli")]),v._v(" 脚手架规范，一个 "),e("strong",[v._v("js")]),v._v(" 文件，一个 "),e("strong",[v._v("CSS")]),v._v(" 文件")]),v._v(" "),e("h4",{attrs:{id:"_26-vuex-有哪几种属性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_26-vuex-有哪几种属性"}},[v._v("#")]),v._v(" "),e("strong",[v._v("26. vuex 有哪几种属性")])]),v._v(" "),e("ul",[e("li",[v._v("state")]),v._v(" "),e("li",[v._v("getter")]),v._v(" "),e("li",[v._v("mutation")]),v._v(" "),e("li",[v._v("action")]),v._v(" "),e("li",[v._v("module")])]),v._v(" "),e("h4",{attrs:{id:"_27-vuex-中的-store-特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_27-vuex-中的-store-特性"}},[v._v("#")]),v._v(" "),e("strong",[v._v("27. vuex 中的 store 特性")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("vuex")]),v._v(" 就像是一个仓库，仓库里面放了很多对象。其中 "),e("strong",[v._v("state")]),v._v(" 就是数据源存放地，对应 "),e("strong",[v._v("vue")]),v._v(" 里面的 "),e("strong",[v._v("data")])]),v._v(" "),e("li",[e("strong",[v._v("state")]),v._v(" 里面存放的数据源是响应式的，"),e("strong",[v._v("vue")]),v._v(" 组件从 "),e("strong",[v._v("store")]),v._v(" 读取数据，若是 "),e("strong",[v._v("store")]),v._v(" 中的数据发生变化，依赖这组数据的组件也会发生更新")]),v._v(" "),e("li",[v._v("它通过 "),e("strong",[v._v("mapState")]),v._v(" 把全局的 "),e("strong",[v._v("state")]),v._v(" 和 "),e("strong",[v._v("getter")]),v._v(" 映射到当前组件的 "),e("strong",[v._v("computed")]),v._v(" 中")])]),v._v(" "),e("h4",{attrs:{id:"_28-vuex-中的-getter-的特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_28-vuex-中的-getter-的特性"}},[v._v("#")]),v._v(" "),e("strong",[v._v("28. vuex 中的 getter 的特性")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("getter")]),v._v(" 可以对 "),e("strong",[v._v("state")]),v._v(" 进行计算操作，它就是 "),e("strong",[v._v("store")]),v._v(" 的计算属性")]),v._v(" "),e("li",[v._v("虽然在组件内也可以做计算属性，但是 "),e("strong",[v._v("getters")]),v._v(" 可以在多个组件内复用")]),v._v(" "),e("li",[v._v("如果一个状态只在一个组件内使用，是可以不用 "),e("strong",[v._v("getters")])])]),v._v(" "),e("h4",{attrs:{id:"_29-vuex-中的-mutation-的特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_29-vuex-中的-mutation-的特性"}},[v._v("#")]),v._v(" "),e("strong",[v._v("29. vuex 中的 mutation 的特性")])]),v._v(" "),e("p",[e("strong",[v._v("action")]),v._v(" 类似于 "),e("strong",[v._v("mutation")]),v._v(" ,但是 "),e("strong",[v._v("action")]),v._v(" 提交的是 "),e("strong",[v._v("mutation")]),v._v(" , 而不是直接变更状态， "),e("strong",[v._v("action")]),v._v(" 可以包含任意异步操作")]),v._v(" "),e("h4",{attrs:{id:"_30-vue-中的-ajax-请求是应该写在组件还是-action-中"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_30-vue-中的-ajax-请求是应该写在组件还是-action-中"}},[v._v("#")]),v._v(" "),e("strong",[v._v("30. vue 中的 ajax 请求是应该写在组件还是 action 中")])]),v._v(" "),e("p",[v._v("如果请求的数据不被其他组件公用，仅仅在组件内部使用，既不需要放在 "),e("strong",[v._v("vuex")]),v._v(" 的 "),e("strong",[v._v("state")]),v._v(" 中。 如果请求的请求的数据被多个组件公用的话，请将请求放在 "),e("strong",[v._v("action")]),v._v(" 中，方便数据复用，并包裹成 "),e("strong",[v._v("Promise")]),v._v(" 返回")]),v._v(" "),e("h4",{attrs:{id:"_31-为什么要使用-vuex"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_31-为什么要使用-vuex"}},[v._v("#")]),v._v(" "),e("strong",[v._v("31. 为什么要使用 vuex")])]),v._v(" "),e("ul",[e("li",[v._v("提高代码的可维护性，方便修改数据，使用 "),e("strong",[v._v("vuex")]),v._v(" 修改数据时只用修改一处，反之你需要修改三处")]),v._v(" "),e("li",[v._v("提升代码的可读性，因为一个组件里面的数据你看不出是从哪里来的")]),v._v(" "),e("li",[v._v("降低耦合度，本来 "),e("strong",[v._v("Vue")]),v._v(" 的 "),e("strong",[v._v("Component")]),v._v(" 就是为了减少耦合，如果不用 "),e("strong",[v._v("Vuex")]),v._v(" 会大量的上传派发，会让耦合度大大增加")])]),v._v(" "),e("h4",{attrs:{id:"_32-vue-中有处理过内存泄露问题吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_32-vue-中有处理过内存泄露问题吗"}},[v._v("#")]),v._v(" "),e("strong",[v._v("32. vue 中有处理过内存泄露问题吗")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("意外的全局变量")]),v._v(" "),e("p",[v._v("函数中意外的定义了全局变量，每次执行函数都会生成该变量，且不会随着函数执行结束而释放。")])]),v._v(" "),e("li",[e("p",[v._v("未清除的定时器")]),v._v(" "),e("p",[v._v("定时器没有清除，它内部引用的变量，不会被释放。")])]),v._v(" "),e("li",[e("p",[v._v("脱离 DOM 的元素引用")]),v._v(" "),e("p",[v._v("一个 DOM 容器删除之后，变量未置为 null ，则其内部的 DOM 元素则不会释放。")])]),v._v(" "),e("li",[e("p",[v._v("持续绑定的事件")]),v._v(" "),e("p",[v._v("函数中 "),e("code",[v._v("addEventListener")]),v._v(" 绑定事件，函数多次执行，绑定便会产生多次，产生内存泄漏。")])]),v._v(" "),e("li",[e("p",[v._v("绑在 "),e("code",[v._v("EventBus")]),v._v(" 的事件没有解绑")])]),v._v(" "),e("li",[e("p",[v._v("闭包引起内存泄漏")]),v._v(" "),e("p",[v._v("比如事件处理回调，导致 DOM 对象和脚本中对象双向引用。")])]),v._v(" "),e("li",[e("p",[v._v("使用第三方库创建，导致 DOM 对象和脚本对象双向引用")])]),v._v(" "),e("li",[e("p",[v._v("单页应用时，页面路由切换，内存未释放")])])]),v._v(" "),e("h4",{attrs:{id:"_33-eventloop-事件循环机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_33-eventloop-事件循环机制"}},[v._v("#")]),v._v(" "),e("strong",[v._v("33. Eventloop 事件循环机制")])]),v._v(" "),e("ul",[e("li",[v._v("将 "),e("strong",[v._v("执行栈")]),v._v(" 最开始的同步代码（宏任务）执行完成。")]),v._v(" "),e("li",[v._v("检查是否有微任务，如有则执行所有的微任务。")]),v._v(" "),e("li",[v._v("取出 "),e("strong",[v._v("任务队列")]),v._v(" 中事件所对应的回调函数，（宏任务）进入 "),e("strong",[v._v("执行栈")]),v._v(" 并执行完成。")]),v._v(" "),e("li",[v._v("再检查是否有微任务，如有则执行所有的微任务。")]),v._v(" "),e("li",[v._v("主线程不断重复上面的两个（3，4）步骤")])]),v._v(" "),e("p",[e("strong",[v._v("宏任务")]),v._v("："),e("code",[v._v("同步代码")]),v._v("，"),e("code",[v._v("setTimeout")]),v._v("，"),e("code",[v._v("setInterval")]),v._v("，"),e("code",[v._v("requestAnimationFrame")]),v._v("，"),e("code",[v._v("I/O")]),v._v("，"),e("code",[v._v("UI rendering")]),v._v(" "),e("strong",[v._v("微任务")]),v._v("："),e("code",[v._v("process.nextTick")]),v._v("，"),e("code",[v._v("promise callback")]),v._v("，"),e("code",[v._v("MutationObserver")])]),v._v(" "),e("h4",{attrs:{id:"_34-vue-的-axios"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_34-vue-的-axios"}},[v._v("#")]),v._v(" "),e("strong",[v._v("34. Vue 的 axios")])]),v._v(" "),e("p",[e("code",[v._v("axios")]),v._v(" 是一个基于 "),e("code",[v._v("Promise")]),v._v(" 用于浏览器和 "),e("code",[v._v("nodejs")]),v._v(" 的 "),e("code",[v._v("HTTP")]),v._v(" 客户端，它本身具有以下特征：")]),v._v(" "),e("ul",[e("li",[v._v("从浏览器中创建 "),e("code",[v._v("XMLHttpRequest")])]),v._v(" "),e("li",[v._v("从 "),e("code",[v._v("node.js")]),v._v(" 发出 "),e("code",[v._v("http")]),v._v(" 请求")]),v._v(" "),e("li",[v._v("支持 "),e("code",[v._v("Promise API")])]),v._v(" "),e("li",[v._v("拦截请求和响应")]),v._v(" "),e("li",[v._v("转换请求和响应数据")]),v._v(" "),e("li",[v._v("取消请求")]),v._v(" "),e("li",[v._v("自动转换 "),e("code",[v._v("JSON")]),v._v(" 数据")]),v._v(" "),e("li",[v._v("客户端支持防止 "),e("code",[v._v("CSRF/XSRF")])])]),v._v(" "),e("h4",{attrs:{id:"_35-vue-router-的两种模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_35-vue-router-的两种模式"}},[v._v("#")]),v._v(" "),e("strong",[v._v("35. vue-router 的两种模式")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("hash")]),v._v(" 模式\n"),e("ul",[e("li",[v._v("使用 "),e("code",[v._v("URL")]),v._v(" 的 "),e("code",[v._v("hash")]),v._v(" 来模拟一个完整的 URL,于是当 URL 改变的时候,页面不会重新加载,也就是单页应用")]),v._v(" "),e("li",[v._v("当 "),e("code",[v._v("#")]),v._v(" 后面的 hash 发生变化时,不会导致浏览器向服务器发出请求,浏览器不发出请求就不会刷新页面,并且会触发 "),e("code",[v._v("hasChange")]),v._v(" 这个事件,通过监听 hash 值的变化来实现更新页面部分内容的操作")])])]),v._v(" "),e("li",[e("code",[v._v("history")]),v._v(" 模式: 主要使用 "),e("code",[v._v("HTML5")]),v._v(" 的 "),e("strong",[e("em",[v._v("pushState()")])]),v._v(" 和 "),e("strong",[e("em",[v._v("replaceState()")])]),v._v(" 这两个 api 来实现的\n"),e("ul",[e("li",[e("strong",[e("em",[v._v("pushState()")])]),v._v(" 可以改变 url 地址且不会发送请求")]),v._v(" "),e("li",[e("strong",[e("em",[v._v("replaceState()")])]),v._v(" 可以读取历史记录栈,还可以对浏览器记录进行修改")])])]),v._v(" "),e("li",[v._v("前面的 "),e("code",[v._v("hashchange")]),v._v("，你只能改变#后面的 url 片段。而 "),e("code",[v._v("pushState")]),v._v(" 设置的新 URL 可以是与当前 URL 同源的任意 URL。\nhistory 模式则会将 URL 修改得就和正常请求后端的 URL 一样,如后端没有配置对应/user/id 的路由处理，则会返回 404 错误")])]),v._v(" "),e("h4",{attrs:{id:"_36-父子组件生命周期执行顺序"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_36-父子组件生命周期执行顺序"}},[v._v("#")]),v._v(" "),e("strong",[v._v("36. 父子组件生命周期执行顺序")])]),v._v(" "),e("p",[v._v("父 beforecreate -> 父 created -> 父 beforeMount -> 子 beforecreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted")]),v._v(" "),e("ul",[e("li",[e("ol",[e("li",[v._v("当父组件执行完 "),e("strong",[v._v("beforeMount")]),v._v(" 挂载开始后，会依次执行子组件的生命周期钩子，直到全部子组件 "),e("strong",[v._v("mounted")]),v._v(" 挂载到实例上，父组件才会进入 "),e("strong",[v._v("mounted")]),v._v(" 钩子。")])])]),v._v(" "),e("li",[e("ol",{attrs:{start:"2"}},[e("li",[v._v("子组件触发事件，会先触发父级 "),e("strong",[v._v("beforeUpdate")]),v._v(" 钩子，再去触发子级 "),e("strong",[v._v("beforeUpdate")]),v._v(" 钩子，下面又是先执行子级 "),e("strong",[v._v("update")]),v._v(" 钩子，后执行父级 "),e("strong",[v._v("update")]),v._v(" 钩子。")])])])]),v._v(" "),e("p",[e("strong",[v._v("总结：")]),v._v(" 父组件先于子组件 "),e("strong",[v._v("created")]),v._v("，而子组件先于父组件 "),e("strong",[v._v("mounted")]),v._v(" 从外到内，再从内到外。")]),v._v(" "),e("h4",{attrs:{id:"_37-vue-中子组件调用父组件的方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_37-vue-中子组件调用父组件的方法"}},[v._v("#")]),v._v(" "),e("strong",[v._v("37. vue 中子组件调用父组件的方法")])]),v._v(" "),e("ul",[e("li",[v._v("在子组件中通过 "),e("strong",[v._v("this.$parent.event")]),v._v(" 来调用父组件方法")]),v._v(" "),e("li",[v._v("在子组件里面用 "),e("strong",[v._v("$emit")]),v._v(" 向父组件触发一个事件，父组件监听这个事件")]),v._v(" "),e("li",[v._v("父组件把方法传入子组件，在组件里面直接调用这个方法")])]),v._v(" "),e("h4",{attrs:{id:"_38-vue-双向绑定原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_38-vue-双向绑定原理"}},[v._v("#")]),v._v(" "),e("strong",[v._v("38. vue 双向绑定原理")])]),v._v(" "),e("ul",[e("li",[v._v("通过 "),e("strong",[v._v("v-model")]),v._v(" 可以实现双向绑定")]),v._v(" "),e("li",[v._v("采用数据劫持和发布者-订阅模式的方式")]),v._v(" "),e("li",[v._v("通过 "),e("strong",[v._v("Object.defineProperty()")]),v._v(" 来劫持各个的 "),e("strong",[v._v("set()")]),v._v(" 设置， "),e("strong",[v._v("get()")]),v._v(" 获取")]),v._v(" "),e("li",[v._v("触发相应的监听回调来渲染视图")])]),v._v(" "),e("p",[v._v("Vue3.0 采用原生 "),e("strong",[v._v("Proxy")]),v._v(" 替换 "),e("strong",[v._v("Object.defineProperty()")])]),v._v(" "),e("h4",{attrs:{id:"_39-为什么要替换-object-defineproperty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_39-为什么要替换-object-defineproperty"}},[v._v("#")]),v._v(" "),e("strong",[v._v("39. 为什么要替换 Object.defineProperty()")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("Object.defineProperty()")]),v._v(" 只能遍历对象属性进行劫持")]),v._v(" "),e("li",[e("strong",[v._v("Proxy")]),v._v(" 直接可以劫持整个对象，并返回一个新对象，我么可以治操作心的对象达到响应式目的")])]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[v._v("在 Vue 中 ，"),e("strong",[v._v("Object.defineProperty()")]),v._v(" 无法监控到数组下标的变化，导致直接通过数组下标给数组设置值，不能实时响应。")]),v._v(" "),e("p",[e("strong",[v._v("Object.defineProperty()")]),v._v(" 只能劫持对象的属性，因此我们需要对每个对象的每个属性进行遍历。")])]),e("h4",{attrs:{id:"_40-vue-生命周期四个初始化阶段方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_40-vue-生命周期四个初始化阶段方法"}},[v._v("#")]),v._v(" "),e("strong",[v._v("40. Vue 生命周期四个初始化阶段方法")])]),v._v(" "),e("ul",[e("li",[e("strong",[v._v("beforeCreate()")]),v._v(" : 创建 vue 之前执行 （数据和虚拟 DOM 树还没有加载完成）")]),v._v(" "),e("li",[e("strong",[v._v("created()")]),v._v(" : 创建 vue 之前执行 （数据已经加载好，虚拟 DOM 树没有加载完成）")]),v._v(" "),e("li",[e("strong",[v._v("beforeMount()")]),v._v(" : 页面渲染之前执行 （数据和虚拟 DOM 树都已经加载好，但是数据这时并没有填充）")]),v._v(" "),e("li",[e("strong",[v._v("mounted()")]),v._v(" : 页面渲染之后 （数据已经填充完成）")])]),v._v(" "),e("h4",{attrs:{id:"_41-怎样理解-vue-的单向数据流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_41-怎样理解-vue-的单向数据流"}},[v._v("#")]),v._v(" "),e("strong",[v._v("41. 怎样理解 Vue 的单向数据流")])]),v._v(" "),e("p",[v._v("所有的 prop 都使得其父子 prop 之间形成一个单向下行绑定：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。")]),v._v(" "),e("p",[v._v("额外的，每次父组件发生更新时，子组件中所有的 prop 都将会刷新的值。这意味着你不应该再一个子组件内部改变 prop。如果你这样做了，vue 会在浏览器的控制台中发出警告。子组件想修改时，只能通过$emit 派发一个自定义事件，父组件接收到后，由父组件修改。")]),v._v(" "),e("h4",{attrs:{id:"_42-在哪个生命周期内调用异步请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_42-在哪个生命周期内调用异步请求"}},[v._v("#")]),v._v(" "),e("strong",[v._v("42. 在哪个生命周期内调用异步请求")])]),v._v(" "),e("p",[v._v("可以在钩子函数 "),e("strong",[v._v("created、beforeMount、mounted")]),v._v(" 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端返回的数据进行赋值。")]),v._v(" "),e("p",[v._v("但是推荐在 created 钩子函数中调用异步请求，优点如下：")]),v._v(" "),e("ul",[e("li",[v._v("能更快获取到服务端数据，减少页面 loading 时间")]),v._v(" "),e("li",[v._v("ssr 不支持 beforeMount、mounted 钩子函数，所以放在 created 中有助于一致性。")])]),v._v(" "),e("h4",{attrs:{id:"_43-在什么阶段才能访问操作-dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_43-在什么阶段才能访问操作-dom"}},[v._v("#")]),v._v(" "),e("strong",[v._v("43. 在什么阶段才能访问操作 DOM")])]),v._v(" "),e("p",[v._v("在钩子函数 mounted 被调用前，Vue 已经将编译好的模板挂载到页面上，所以在 mounted 中可以访问操作 DOM。")]),v._v(" "),e("h4",{attrs:{id:"_44-父组件可以监听到子组件的生命周期吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_44-父组件可以监听到子组件的生命周期吗"}},[v._v("#")]),v._v(" "),e("strong",[v._v("44. 父组件可以监听到子组件的生命周期吗？")])]),v._v(" "),e("ul",[e("li",[v._v("可以在子组件的生命周期手动通过 "),e("strong",[v._v("$emit")]),v._v(" 触发发组件的事件。")]),v._v(" "),e("li",[v._v("可以在父组件引用子组件时通过 "),e("strong",[v._v("@hook")]),v._v(" 来监听即可"),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[e("strong",[e("em",[v._v('@hook:mounted="handleHookMounted"')])])]),v._v(" "),e("p",[v._v("当然 @hook 方法不仅仅是可以监听 mounted，其它的生命周期事件，例如：created，updated 等都可以监听")])])])]),v._v(" "),e("h4",{attrs:{id:"_45-vuex-是通过什么方式提供响应式数据的-原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_45-vuex-是通过什么方式提供响应式数据的-原理是什么"}},[v._v("#")]),v._v(" "),e("strong",[v._v("45. Vuex 是通过什么方式提供响应式数据的？原理是什么？")])]),v._v(" "),e("p",[v._v("Vuex 的两大核心 State 和 Getters 都是响应的，即当 state 或 getters 的某一个状态改变时，它是能驱动视图发生相应的改变。")]),v._v(" "),e("p",[e("strong",[v._v("整体思路是数据劫持 + 观察者模式")])]),v._v(" "),e("p",[v._v("对象内部通过 "),e("code",[v._v("difineReactive")]),v._v(" 方法，使用 "),e("code",[v._v("Object.defineProperty")]),v._v(" 将属性进行劫持（只会劫持已存在的属性），数组则是通过重写数组来实现。当页面使用对应属性时，每个属性都拥有自己的 "),e("code",[v._v("dep")]),v._v(" 属性，存在它所依赖的"),e("code",[v._v("watcher")]),v._v(" （收集依赖）get，当属性变化后子集对应的 "),e("code",[v._v("watcher")]),v._v(" 去更新（派发更新） set。")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("Object.defineProperty")]),v._v(" 数据劫持")]),v._v(" "),e("li",[v._v("使用"),e("code",[v._v("getter")]),v._v("收集依赖，"),e("code",[v._v("setter")]),v._v(" 通知 "),e("code",[v._v("watcher")]),v._v("派发更新")]),v._v(" "),e("li",[e("code",[v._v("watcher")]),v._v(" 发布订阅模式")])]),v._v(" "),e("h4",{attrs:{id:"_46-diff-算法了解吗"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_46-diff-算法了解吗"}},[v._v("#")]),v._v(" "),e("strong",[v._v("46. diff 算法了解吗？")])]),v._v(" "),e("p",[v._v("diff 算法采用同级比较。")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("tag 标签不一致直接新节点替换旧节点。")])]),v._v(" "),e("li",[e("p",[v._v("tag 标签一样。")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("先替换属性")])]),v._v(" "),e("li",[e("p",[v._v("对比子元素")]),v._v(" "),e("ul",[e("li",[e("p",[v._v("新老都有子元素，采用双指针方式进行对比")]),v._v(" "),e("p",[v._v("sameVnode 判断 tag 和 key 完全相同为同一节点，进行节点复用")]),v._v(" "),e("p",[v._v("头和头相等对比")]),v._v(" "),e("p",[v._v("尾和尾相等对比")]),v._v(" "),e("p",[v._v("头和尾相等对比")]),v._v(" "),e("p",[v._v("sameVnod 的时候传入两个新老子节点 patch(oldChild,newChild)")]),v._v(" "),e("p",[v._v("乱序情况 -- 上面的都不符合，先遍历子节点数组形成 key 值映射的 map 对象。")]),v._v(" "),e("p",[v._v("然后根据新子节点数组循环 按照 key 值和位置关系移动以及新增节点 最后删除多余的旧子节点 如果移动旧子节点同样需要 patch(oldChild,newChild)")])]),v._v(" "),e("li",[e("p",[v._v("新的有子元素，老的没有子元素。-- 直接将子元素虚拟节点处啊还成真实节点插入即可。")])]),v._v(" "),e("li",[e("p",[v._v("新的没有子元素，老的有子元素。 -- 直接清空 innerHtml")])])])]),v._v(" "),e("li",[e("p",[v._v("无 tag 标签 -- 文本节点直接比较内容是否一致。")])])])])]),v._v(" "),e("h4",{attrs:{id:"_47-函数式组件使用场景和原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_47-函数式组件使用场景和原理"}},[v._v("#")]),v._v(" "),e("strong",[v._v("47. 函数式组件使用场景和原理")])]),v._v(" "),e("ul",[e("li",[e("p",[v._v("函数式组件与普通组件的区别")]),v._v(" "),e("ul",[e("li",[v._v("函数式组件需要在生命组件时指定 "),e("strong",[v._v("function:true")])]),v._v(" "),e("li",[v._v("不需要实例化，所以没有 this，this 通过 render 函数的第二个参数 context 代替")]),v._v(" "),e("li",[v._v("没有生命周期钩子函数，不能使用计算属性， watch")]),v._v(" "),e("li",[v._v("不能通过 "),e("strong",[v._v("$emit")]),v._v(" 对外暴露事件，调用事件只能通过 "),e("strong",[v._v("context.listeners.click")]),v._v(" 的方式调用外部传入的事件")]),v._v(" "),e("li",[v._v("因为函数组件时没有实例化，所以在外部通过 ref 去引用组件时，实际用的是 "),e("strong",[v._v("HTMLElement")])]),v._v(" "),e("li",[v._v("函数式组件的 props 可以不用显示声明，所以没有在 props 里面声明的属性都会被自动隐式解析为 prop，而普通的组件所有为声明的属性都解析道 "),e("strong",[v._v("$attrs")]),v._v(" 里面，并自动挂载到组件根元素上（可以通过 inheritAttrs 属性禁止）")])])]),v._v(" "),e("li",[e("p",[v._v("优点")]),v._v(" "),e("ul",[e("li",[v._v("由于函数组件不需要实例化，无状态，没有生命周期，所以渲染性要好于普通组件")]),v._v(" "),e("li",[v._v("函数组件结构比较简单，代码结构更清晰")])])]),v._v(" "),e("li",[e("p",[v._v("使用场景")]),v._v(" "),e("ul",[e("li",[v._v("一个简单的展示组件，作为容器组件使用比如 route-view 就是一个函数式组件。")]),v._v(" "),e("li",[v._v("高阶组件 --\x3e 用于接收一个组件为参数，返回一个被包装过的组件。")])])])]),v._v(" "),e("h4",{attrs:{id:"_48-生命周期钩子是如何实现的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_48-生命周期钩子是如何实现的"}},[v._v("#")]),v._v(" "),e("strong",[v._v("48. 生命周期钩子是如何实现的？")])]),v._v(" "),e("p",[v._v("Vue 的生命周期钩子核心实现是利用发布订阅模式先把用户传入的生命周期钩子订阅好（内部采用数组的方法存储）然后在创建组件实例的过程中会一次执行对应的钩子方法（发布）")]),v._v(" "),e("h4",{attrs:{id:"_49-vue-模板编译原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_49-vue-模板编译原理"}},[v._v("#")]),v._v(" "),e("strong",[v._v("49. Vue 模板编译原理")])]),v._v(" "),e("p",[v._v("Vue 的编译过程就是将 "),e("code",[v._v("template")]),v._v(" 转化为 "),e("code",[v._v("render")]),v._v(" 函数的过程，分为三步：")]),v._v(" "),e("ul",[e("li",[v._v("第一步是将模板字符串转换成 "),e("code",[v._v("element AST")]),v._v(" （解析器）")]),v._v(" "),e("li",[v._v("第二步是对 AST 进行静态节点标记，主要用来做虚拟 DOM 的渲染优化（优化器）")]),v._v(" "),e("li",[v._v("第三步是使用 "),e("code",[v._v("element AST")]),v._v(" 生成 "),e("code",[v._v("render")]),v._v(" 函数代码字符串（代码生成器）")])]),v._v(" "),e("h4",{attrs:{id:"_50-写过自定义指令吗-原理是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_50-写过自定义指令吗-原理是什么"}},[v._v("#")]),v._v(" "),e("strong",[v._v("50. 写过自定义指令吗？原理是什么？")])]),v._v(" "),e("p",[v._v("指令本质上是装饰器，是 vue 对 HTML 元素的扩展，给 HTML 元素添加自定义功能。vue 编译 DOM 时，会找到指令对象，执行指令的相关方法。")]),v._v(" "),e("p",[v._v("自定义指令有五个生命周期（也叫钩子函数），分别是 "),e("code",[v._v("bind、inserted、update、componentUpdated、unbind")])]),v._v(" "),e("ul",[e("li",[e("code",[v._v("bind")]),v._v("：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。")]),v._v(" "),e("li",[e("code",[v._v("inserted")]),v._v("：被绑定元素插入父节点时调用。")]),v._v(" "),e("li",[e("code",[v._v("update")]),v._v("：被绑定元素所造的模板更新时调用，而不被轮绑定值是否变化。通过比较前后的绑定值。")]),v._v(" "),e("li",[e("code",[v._v("componentUpdated")]),v._v("：被绑定元素所在模板完成一次更新周期时调用。")]),v._v(" "),e("li",[e("code",[v._v("unbind")]),v._v("：只调用一次，指令与元素解绑时调用。")])]),v._v(" "),e("p",[e("strong",[v._v("原理：")])]),v._v(" "),e("ul",[e("li",[v._v("在生成 "),e("code",[v._v("AST")]),v._v(" 语法树时，遇到指令会给当前元素添加 "),e("code",[v._v("directives")]),v._v("属性。")]),v._v(" "),e("li",[v._v("通过 "),e("code",[v._v("genDirectives")]),v._v(" 生成指令代码。")]),v._v(" "),e("li",[v._v("在 "),e("code",[v._v("patch")]),v._v(" 前将指令的钩子提取到 "),e("strong",[e("em",[v._v("cbs")])]),v._v(" 中，在 "),e("code",[v._v("patch")]),v._v(" 过程中调用对应的钩子。")]),v._v(" "),e("li",[v._v("当执行指令对应钩子函数时，调用对应指令定义方法。")])]),v._v(" "),e("h4",{attrs:{id:"_51-vue-extend-作用和原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_51-vue-extend-作用和原理"}},[v._v("#")]),v._v(" "),e("strong",[v._v("51. Vue.extend 作用和原理")])]),v._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[e("strong",[v._v("官方解释：")]),v._v(" "),e("code",[v._v("Vue.extend")]),v._v(" 使用基础 Vue 构造器，创建一个子类。参数时一个包含组件选项的对象。")])]),e("p",[v._v("其实就是一个子类构造器，是 Vue 组件的核心 API。实现思路就是使用原型继承的方法返回了 vue 的子类，并且利用 "),e("code",[v._v("mergeOptions")]),v._v(" 把传入组件的 "),e("code",[v._v("options")]),v._v(" 就是父类的 "),e("code",[v._v("options")]),v._v(" 进行了合并。")]),v._v(" "),e("h4",{attrs:{id:"_52-vue-mixin-的使用场景和原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_52-vue-mixin-的使用场景和原理"}},[v._v("#")]),v._v(" "),e("strong",[v._v("52. Vue.mixin 的使用场景和原理")])]),v._v(" "),e("p",[v._v("在日常开发中，我们经常会遇到在不同组件中经常用到一些相同或者相似的代码，这些代码的功能相对独立，可以通过 vue 的 mixin 功能抽离公共的业务逻辑，原理类似对象的继承，当组件初始化时会调用 "),e("code",[v._v("mergeOptions")]),v._v(" 方法进行合并，采用策略模式针对不同的属性进行合并。当组件和混入对象含有相同名选项时，这些选项将以恰当的方式进行合并。")]),v._v(" "),e("h4",{attrs:{id:"_53-vue-框架怎么实现对象和数组的监听"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_53-vue-框架怎么实现对象和数组的监听"}},[v._v("#")]),v._v(" "),e("strong",[v._v("53. Vue 框架怎么实现对象和数组的监听？")])]),v._v(" "),e("p",[v._v("Vue 框架是通过遍历数组和递归遍历对象，从而达到利用 "),e("code",[v._v("Object.defineProperty()")]),v._v(" 也能对对象和数组（部分方法的操作）进行监听。")]),v._v(" "),e("h4",{attrs:{id:"_54-proxy-和-object-defineproperty-优劣对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_54-proxy-和-object-defineproperty-优劣对比"}},[v._v("#")]),v._v(" "),e("strong",[v._v("54. Proxy 和 Object.defineProperty 优劣对比")])]),v._v(" "),e("ul",[e("li",[e("p",[e("strong",[v._v("Proxy 优势：")])]),v._v(" "),e("ul",[e("li",[v._v("可以直接监听对象而非属性")]),v._v(" "),e("li",[v._v("可以直接监听数组的变化")]),v._v(" "),e("li",[v._v("有多达 13 种拦截方法，不限于 "),e("code",[v._v("apply")]),v._v("、"),e("code",[v._v("ownKeys")]),v._v("、"),e("code",[v._v("deleteProperty")]),v._v(" 、"),e("code",[v._v("has")]),v._v(" 等等是 "),e("code",[v._v("Object.defineProperty")]),v._v(" 不具备的。")]),v._v(" "),e("li",[v._v("返回的是一个新对象，我们可以只操作新的对象达到目的，而 "),e("code",[v._v("Object.defineProperty()")]),v._v("只能遍历对象属性直接修改")]),v._v(" "),e("li",[v._v("作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准性能红利")])])]),v._v(" "),e("li",[e("p",[e("strong",[v._v("Object.defineProperty 优势：")])]),v._v(" "),e("ul",[e("li",[v._v("兼容性好，支持 IE9，而 Proxy 存在浏览器兼容性问题，而且无法用 "),e("code",[v._v("polyfill")]),v._v(" 磨平，因此 Vue 的作者才声明需要等到下个大版本（3.0）才能用 "),e("code",[v._v("Proxy")]),v._v(" 重写。")])])])]),v._v(" "),e("h4",{attrs:{id:"_55-完整的导航解析流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_55-完整的导航解析流程"}},[v._v("#")]),v._v(" "),e("strong",[v._v("55. 完整的导航解析流程")])]),v._v(" "),e("ul",[e("li",[v._v("导航被触发")]),v._v(" "),e("li",[v._v("在失活的组件里调用 "),e("code",[v._v("beforeRouterLeave")]),v._v(" 守卫")]),v._v(" "),e("li",[v._v("调用全局的 "),e("code",[v._v("beforeEach")]),v._v(" 守卫")]),v._v(" "),e("li",[v._v("在重用的组件调用 "),e("code",[v._v("beforeRouterUpdate")]),v._v(" 守卫（2.2+）")]),v._v(" "),e("li",[v._v("调用路由配置里面的 "),e("code",[v._v("beforeEnter")]),v._v(" 守卫")]),v._v(" "),e("li",[v._v("解析异步路由组件")]),v._v(" "),e("li",[v._v("在被激活的组件里调用 "),e("code",[v._v("beforeRouterEnter")])]),v._v(" "),e("li",[v._v("调用全局的 "),e("code",[v._v("beforeResolve")]),v._v(" 守卫（2.5+）")]),v._v(" "),e("li",[v._v("导航被确认")]),v._v(" "),e("li",[v._v("调用全局的 "),e("code",[v._v("afterEach")]),v._v(" 钩子")]),v._v(" "),e("li",[v._v("触发 DOM 更新")]),v._v(" "),e("li",[v._v("调用 "),e("code",[v._v("beforeRouterEnter")]),v._v(" 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入")])]),v._v(" "),e("h4",{attrs:{id:"_56-vuex-页面刷新数据丢失怎么解决"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_56-vuex-页面刷新数据丢失怎么解决"}},[v._v("#")]),v._v(" "),e("strong",[v._v("56. Vuex 页面刷新数据丢失怎么解决")])]),v._v(" "),e("p",[v._v("需要做 vuex 的数据持久化，一般使用本地储存的方案来保存数据，可以自己设计存储方案，也可以使用第三方插件。")]),v._v(" "),e("p",[v._v("推荐使用 "),e("code",[v._v("vuex-persist")]),v._v(" 插件，它是为 Vuex 持久化储存而生的一个插件。不需要你手动存取"),e("code",[v._v("storage")]),v._v(",而是直接将状态保存至"),e("code",[v._v("cookie")]),v._v(" 或者 "),e("code",[v._v("localStorage")]),v._v(" 中。")])])}),[],!1,null,null,null);_.default=r.exports}}]);