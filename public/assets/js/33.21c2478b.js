(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{600:function(t,s,a){"use strict";a.r(s);var n=a(12),o=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{align:"center"}},[t._v("常见Git报错")]),t._v(" "),a("h2",{attrs:{id:"authentication-failed-for-http-x-x-x-x-x-git"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#authentication-failed-for-http-x-x-x-x-x-git"}},[t._v("#")]),t._v(" Authentication Failed for http://x.x.x.x/x/git")]),t._v(" "),a("p",[a("em",[a("strong",[t._v("Action:")])]),t._v("\n这种报错出现在你所跟踪的Git地址账号和密码不一致时。\n"),a("em",[a("strong",[t._v("Solution:")])]),t._v("\n[1] 打开控制面板\n[2] 点击用户账户\n[3] 管理windows凭据\n[4] 找到对应Git地址的账户和密码（删除或者直接修改）")]),t._v(" "),a("h2",{attrs:{id:"git-commit-提交的时候报错husky-pre-commit-hook-failed-add-no-verify-to-bypass"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-提交的时候报错husky-pre-commit-hook-failed-add-no-verify-to-bypass"}},[t._v("#")]),t._v(" git commit 提交的时候报错husky > pre-commit hook failed (add --no-verify to bypass)")]),t._v(" "),a("p",[a("em",[a("strong",[t._v("Action：")])]),t._v('\n这个问题是因为当你在终端输入git commit -m "XXX",提交代码的时候,pre-commit(客户端)钩子，它会在Git键入提交信息前运行做代码风格检查。如果代码不符合相应规则，则报错，而它的检测规则就是根据.git/hooks/pre-commit文件里面的相关定义。\n'),a("em",[a("strong",[t._v("Solution:")])])]),t._v(" "),a("ul",[a("li",[t._v("1")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("npm uninstall husky "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("save\n")])])]),a("ul",[a("li",[t._v("2\n进入项目的.git文件夹(文件夹默认隐藏,可先设置显示或者命令ls查找),再进入hooks文件夹,删除pre-commit文件")])]),t._v(" "),a("p",[a("strong",[t._v("MAC")]),t._v(" 对于隐藏文件可能不太好找，可以通过 linux 命令来操作")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 查看全部文件")]),t._v("\nls "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("a\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进入 .git 文件")]),t._v("\ncd "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("git\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 进入hooks文件")]),t._v("\ncd hooks\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 删除 pre-commit.js 文件")]),t._v("\nrm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("rf pre"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("commit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("js\n")])])]),a("ul",[a("li",[t._v('3\n将git commit -m "XXX" 改为 git commit --no-verify -m "XXX"')])])])}),[],!1,null,null,null);s.default=o.exports}}]);